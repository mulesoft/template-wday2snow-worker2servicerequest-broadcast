<?xml version="1.0" encoding="UTF-8"?>

<mule 
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
    xmlns="http://www.mulesoft.org/schema/mule/core"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:spring="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    
    <batch:job name="createServiceNowAssets">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="CheckIfInSales" >


                <enricher source="payload" target="recordVars['isSales']" doc:name="store in recordVars['isSales']">
                    <expression-component doc:name="Check if in department"><![CDATA[payload = false;
if (payload.orgNames != null){
	for (org : payload.orgNames){           
		if (org.name.contains("${wday.department}")) {
				payload = true;	break;	
		}
	}		
};
      ]]></expression-component>

                </enricher>
            </batch:step>
            <batch:step name="InsertPcRequest" >

                <flow-ref name="insertPcRequest" doc:name="Flow Reference"/>

            </batch:step>

            <batch:step name="InsertDeskRequest" >
                <flow-ref name="insertDeskRequest" doc:name="Flow Reference"/>

            </batch:step>

        </batch:process-records>
        <batch:on-complete>
            <json:object-to-json-transformer doc:name="Convert Batch results to JSON"/>
            <logger level="INFO" doc:name="Log the batch result" message="Batch completed: #[payload]"/>
        </batch:on-complete>
    </batch:job>
    <sub-flow name="insertPcRequest" >
        <dw:transform-message doc:name="Create Service Request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_request
%var pcDeliveryDays = p('snow.pc.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#active: true,
		ns0#approval: "Requested",
		ns0#"assigned_to": p('snow.pc.assignedTo'),
		ns0#"due_date": (now + toPeriod(pcDeliveryDays)) as :date,
		ns0#location: p('snow.locationA') when recordVars.isSales otherwise p('snow.locationB'),
		ns0#price: p('snow.pc.price')
	}
}

]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="insertRequestFlow" doc:name="call insertRequestFlow"/>
        <dw:transform-message doc:name="Create Service Request Item">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_req_item
%var pcDeliveryDays = p('snow.pc.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#active: true,
		ns0#approval: "Requested",
		ns0#"assigned_to": p('snow.pc.assignedTo'),
		ns0#"cat_item": p('snow.pc.model'),
		ns0#parent: payload.sysId,
		ns0#request: payload.sysId,
		ns0#price: p('snow.pc.price'),
		ns0#estimatedDelivery: (now + toPeriod(pcDeliveryDays)) as :date
	}
}]]></dw:set-payload>
        </dw:transform-message>

        <flow-ref name="insertItemFlow" doc:name="call insertItemFlow"/>
    </sub-flow>
    <sub-flow name="insertDeskRequest" >
        <dw:transform-message doc:name="Create Service Request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_request
%var deskDeliveryDays = p('snow.desk.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#approval      : "Requested",
		ns0#active        : true,
		ns0#"assigned_to" : p('snow.desk.assignedTo'),
		ns0#location      : p('snow.locationA') when recordVars.isSales otherwise p('snow.locationB'),
		ns0#price         : p('snow.desk.price'),
		ns0#dueDate       : (now + toPeriod(deskDeliveryDays)) as :date
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="insertRequestFlow" doc:name="call insertRequestFlow"/>
        <dw:transform-message doc:name="Create Service Request Item">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_req_item
%var deskDeliveryDays = p('snow.desk.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#active: true,
		ns0#approval: "Requested",
		ns0#"assigned_to": p('snow.desk.assignedTo'),
		ns0#"cat_item": p('snow.desk.model'),
		ns0#parent: payload.sysId,
		ns0#request: payload.sysId,
		ns0#price: p('snow.desk.price'),
		ns0#estimatedDelivery: (now + toPeriod(deskDeliveryDays)) as :date
	}
}]]></dw:set-payload>
        </dw:transform-message>

        <flow-ref name="insertItemFlow" doc:name="call insertItemFlow"/>
    </sub-flow>
    <sub-flow name="insertRequestFlow" >

        <servicenow:invoke config-ref="ServiceNow" type="sc_request||insert" doc:name="Insert Service Request"/>
        <dw:transform-message doc:name="Extract sysId">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
sysId : payload.insertResponse.sys_id]]></dw:set-payload>
        </dw:transform-message>

        <logger message="request: #[payload]" level="INFO" doc:name="Log the insert response"/>
    </sub-flow>
    <sub-flow name="insertItemFlow" >

        <servicenow:invoke config-ref="ServiceNow" type="sc_req_item||insert" doc:name="Insert Service Request Item"/>
        <dw:transform-message doc:name="Extract sysId">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
sysId : payload.insertResponse.sys_id]]></dw:set-payload>
        </dw:transform-message>

        <logger message="request item: #[payload]" level="INFO" doc:name="Log the insert respone"/>
    </sub-flow>

</mule>
